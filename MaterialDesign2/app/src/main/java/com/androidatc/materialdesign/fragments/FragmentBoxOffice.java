package com.androidatc.materialdesign.fragments;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.JsonObjectRequest;
import com.androidatc.materialdesign.MyApplication;
import com.androidatc.materialdesign.R;
import com.androidatc.materialdesign.adapters.AdapterBoxOffice;
import com.androidatc.materialdesign.extras.Constants;
import com.androidatc.materialdesign.extras.MovieSorter;
import com.androidatc.materialdesign.extras.SortListener;
import com.androidatc.materialdesign.loggin.L;
import com.androidatc.materialdesign.network.VolleySingleton;

import com.androidatc.materialdesign.pojo.Movie;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import static com.androidatc.materialdesign.extras.Keys.EndpointBoxOffice.*;
import static com.androidatc.materialdesign.extras.UrlEndPoints.*;

/**
 * Created by jorgecasariego on 1/9/15.
 */
public class FragmentBoxOffice extends Fragment implements SortListener{
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";
    private static final String STATE_MOVIES = "state_movies";

    private String param1;
    private String param2;

    private VolleySingleton volleySingleton;
    private ImageLoader imageLoader;
    private RequestQueue requestQueue;

    private ArrayList<Movie> listMovies = new ArrayList<>();
    private DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
    private RecyclerView listMovieHits;

    private AdapterBoxOffice adapterBoxOffice;

    //the TextView containing error messages generated by Volley
    private TextView mTextError;

    private MovieSorter mSorter = new MovieSorter();


    public static FragmentBoxOffice newInstance(String param1, String param2){
        FragmentBoxOffice fragmentSearch = new FragmentBoxOffice();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);

        fragmentSearch.setArguments(args);

        return fragmentSearch;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putParcelableArrayList(STATE_MOVIES, listMovies);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_box_office, container, false);

        mTextError = (TextView) view.findViewById(R.id.textVolleyError);

        listMovieHits = (RecyclerView) view.findViewById(R.id.listMovies);
        listMovieHits.setLayoutManager(new LinearLayoutManager(getActivity()));

        adapterBoxOffice = new AdapterBoxOffice(getActivity());
        listMovieHits.setAdapter(adapterBoxOffice);


        // En caso que ya hayamos guardado la lista de peliculas antes de dar la vuelta el telefono
        // entonces obtenemos la lista de peliculas con la clave: STATE_MOVIES utilizando la tecnica
        // de parcelable
        if(savedInstanceState != null){
            listMovies = savedInstanceState.getParcelableArrayList(STATE_MOVIES);
            adapterBoxOffice.setMovieList(listMovies);
        } else {
            // Solo enviamos un Json request la primera vez
            sendJsonRequest();
        }



        return view;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if(getArguments() != null){
            param1 = getArguments().getString(ARG_PARAM1);
            param2 = getArguments().getString(ARG_PARAM2);
        }

        volleySingleton = VolleySingleton.getInstance();
        requestQueue = volleySingleton.getRequestQueue();

        sendJsonRequest();


    }

    private void sendJsonRequest() {
        JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET,
                getRequestUrl(30),
                (String) null,
                new Response.Listener<JSONObject>() {
                    @Override
                    public void onResponse(JSONObject response) {
                        //L.t(getActivity(), response.toString());
                        mTextError.setVisibility(View.GONE);
                        listMovies = parseJsonRequest(response);
                        adapterBoxOffice.setMovieList(listMovies);
                    }
                }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
                handleVolleyError(error);
            }
        });

        requestQueue.add(request);
    }

    private void handleVolleyError(VolleyError error) {
        //if any error occurs in the network operations, show the TextView that contains the error message
        mTextError.setVisibility(View.VISIBLE);
        if (error instanceof TimeoutError || error instanceof NoConnectionError) {
            mTextError.setText(R.string.error_timeout);

        } else if (error instanceof AuthFailureError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof ServerError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof NetworkError) {
            mTextError.setText(R.string.error_network);
            //TODO
        } else if (error instanceof ParseError) {
            mTextError.setText(R.string.error_parser);
            //TODO
        }
    }

    private ArrayList<Movie> parseJsonRequest(JSONObject response) {
        ArrayList<Movie> listMovies = new ArrayList<>();

        if(response != null || response.length() > 0) {


            try {
                StringBuilder data = new StringBuilder();

                if (response.has(KEY_MOVIES)) {
                    JSONArray arrayMovies = response.getJSONArray(KEY_MOVIES);

                    for (int i = 0; i < arrayMovies.length(); i++) {
                        long id = 0;
                        String title = Constants.NA;
                        String releaseDate = Constants.NA;
                        int audienceScore = -1;
                        String synopsis = Constants.NA;
                        String urlThumbnail = Constants.NA;

                        JSONObject currentMovie = arrayMovies.getJSONObject(i);

                        //Obtenemos el id de la pelicula actual
                        if(currentMovie.has(KEY_ID) && !currentMovie.isNull(KEY_ID)){
                            id = currentMovie.getLong(KEY_ID);
                        }

                        if(currentMovie.has(KEY_TITLE) && !currentMovie.isNull(KEY_TITLE)){
                            title = currentMovie.getString(KEY_TITLE);
                        }

                        if(currentMovie.has(KEY_RELEASE_DATES) && !currentMovie.isNull(KEY_RELEASE_DATES)){
                            JSONObject objectReleaseDate = currentMovie.getJSONObject(KEY_RELEASE_DATES);

                            if (objectReleaseDate != null
                                    && objectReleaseDate.has(KEY_THEATER)
                                    && !objectReleaseDate.isNull(KEY_THEATER)) {
                                releaseDate = objectReleaseDate.getString(KEY_THEATER);
                            }
                        }




                        JSONObject objectRating = currentMovie.getJSONObject(KEY_RATINGS);

                        if (objectRating != null
                                && objectRating.has(KEY_AUDIENCE_SCORE)
                                && !objectRating.isNull(KEY_AUDIENCE_SCORE)) {

                            audienceScore = objectRating.getInt(KEY_AUDIENCE_SCORE);
                        }

                        if(currentMovie.has(KEY_SYNOPSIS) && !currentMovie.isNull(KEY_SYNOPSIS)){
                            synopsis = currentMovie.getString(KEY_SYNOPSIS);
                        }

                        if(currentMovie.has(KEY_POSTERS) && !currentMovie.isNull(KEY_POSTERS)){
                            JSONObject objectPoster = currentMovie.getJSONObject(KEY_POSTERS);

                            if (objectPoster != null
                                    && objectPoster.has(KEY_THUMBNAIL)
                                    && !objectPoster.isNull(KEY_THUMBNAIL)) {
                                urlThumbnail = objectPoster.getString(KEY_THUMBNAIL);
                            }
                        }

                        Movie movie = new Movie();
                        movie.setId(id);
                        movie.setTitle(title);

                        Date date = null;
                        try {
                            date = dateFormat.parse(releaseDate);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }

                        movie.setReleaseDateTheater(date);
                        movie.setAudienceScore(audienceScore);
                        movie.setSynopsis(synopsis);
                        movie.setUrlThumbnail(urlThumbnail);

                        //Aqui decidimos cuando cargar una pelicula a la lista de peliculas
                        if(id != -1  && !title.equals(Constants.NA)){
                            listMovies.add(movie);
                        }


                    }

                    L.t(getActivity(), listMovies.toString());
                }

            } catch (JSONException e) {
                e.printStackTrace();
            }
        }

        return listMovies;
    }

    public static String getRequestUrl(int limit){
        return URL_BOX_OFFICE
                + URL_CHAR_QUESTION
                + MyApplication.API_KEY_ROTTEN_TOMATOES
                + URL_CHAR_AMEPERSAND
                + URL_PARAM_LIMIT
                + limit;
    }

    @Override
    public void onSortByName() {
        L.t(getActivity(), "Sort name BOX OFFICE was clicked");

        mSorter.sortMovieByName(listMovies);
        adapterBoxOffice.notifyDataSetChanged();
    }

    @Override
    public void onSortByDate() {
        L.t(getActivity(), "Sort date BOX OFFICE was clicked");

        mSorter.sortMoviesByDate(listMovies);
        adapterBoxOffice.notifyDataSetChanged();
    }

    @Override
    public void onSortByRating() {
        L.t(getActivity(), "Sort rating BOX OFFICE was clicked");
    }
}
