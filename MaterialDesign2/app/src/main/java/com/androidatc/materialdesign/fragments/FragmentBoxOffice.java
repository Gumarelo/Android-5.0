package com.androidatc.materialdesign.fragments;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import com.android.volley.AuthFailureError;
import com.android.volley.NetworkError;
import com.android.volley.NoConnectionError;
import com.android.volley.ParseError;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.ServerError;
import com.android.volley.TimeoutError;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageLoader;
import com.android.volley.toolbox.JsonObjectRequest;
import com.androidatc.materialdesign.MyApplication;
import com.androidatc.materialdesign.R;
import com.androidatc.materialdesign.adapters.AdapterBoxOffice;
import com.androidatc.materialdesign.callbacks.BoxOfficeMoviesLoadedListener;
import com.androidatc.materialdesign.database.DBMovies;
import com.androidatc.materialdesign.extras.Constants;
import com.androidatc.materialdesign.extras.MovieSorter;
import com.androidatc.materialdesign.extras.SortListener;
import com.androidatc.materialdesign.loggin.L;
import com.androidatc.materialdesign.network.VolleySingleton;

import com.androidatc.materialdesign.pojo.Movie;
import com.androidatc.materialdesign.task.TaskLoadMoviesBoxOffice;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import static com.androidatc.materialdesign.extras.Keys.EndpointBoxOffice.*;
import static com.androidatc.materialdesign.extras.UrlEndPoints.*;

/**
 * Created by jorgecasariego on 1/9/15.
 */
public class FragmentBoxOffice extends Fragment implements SortListener, BoxOfficeMoviesLoadedListener, SwipeRefreshLayout.OnRefreshListener {
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";
    private static final String STATE_MOVIES = "state_movies";

    private String param1;
    private String param2;

    private ArrayList<Movie> listMovies = new ArrayList<>();
    private RecyclerView listMovieHits;

    private AdapterBoxOffice adapterBoxOffice;

    //the TextView containing error messages generated by Volley
    private TextView mTextError;

    private MovieSorter mSorter = new MovieSorter();

    private SwipeRefreshLayout mSwipeRefreshLayout;

    public static FragmentBoxOffice newInstance(String param1, String param2){
        FragmentBoxOffice fragmentSearch = new FragmentBoxOffice();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);

        fragmentSearch.setArguments(args);

        return fragmentSearch;
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putParcelableArrayList(STATE_MOVIES, listMovies);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_box_office, container, false);

        mTextError = (TextView) view.findViewById(R.id.textVolleyError);

        mSwipeRefreshLayout = (SwipeRefreshLayout) view.findViewById(R.id.swipeMovieHits);
        mSwipeRefreshLayout.setOnRefreshListener(this);

        listMovieHits = (RecyclerView) view.findViewById(R.id.listMovies);
        listMovieHits.setLayoutManager(new LinearLayoutManager(getActivity()));

        adapterBoxOffice = new AdapterBoxOffice(getActivity());
        listMovieHits.setAdapter(adapterBoxOffice);


        // En caso que ya hayamos guardado la lista de peliculas antes de dar la vuelta el telefono
        // entonces obtenemos la lista de peliculas con la clave: STATE_MOVIES utilizando la tecnica
        // de parcelable
        if(savedInstanceState != null){
            listMovies = savedInstanceState.getParcelableArrayList(STATE_MOVIES);
        } else {
            // Solo enviamos un Json request la primera vez
            //sendJsonRequest();
            listMovies = MyApplication.getWritableDatabse().readMovies(DBMovies.BOX_OFFICE);

            if(listMovies.isEmpty()){
                L.t(getActivity(), "Ejecutando tarea desde el fragmento");
                new TaskLoadMoviesBoxOffice(this).execute();
            }
        }

        adapterBoxOffice.setMovieList(listMovies);


        return view;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if(getArguments() != null){
            param1 = getArguments().getString(ARG_PARAM1);
            param2 = getArguments().getString(ARG_PARAM2);
        }


        //sendJsonRequest();


    }

    /*private void handleVolleyError(VolleyError error) {
        //if any error occurs in the network operations, show the TextView that contains the error message
        mTextError.setVisibility(View.VISIBLE);
        if (error instanceof TimeoutError || error instanceof NoConnectionError) {
            mTextError.setText(R.string.error_timeout);

        } else if (error instanceof AuthFailureError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof ServerError) {
            mTextError.setText(R.string.error_auth_failure);
            //TODO
        } else if (error instanceof NetworkError) {
            mTextError.setText(R.string.error_network);
            //TODO
        } else if (error instanceof ParseError) {
            mTextError.setText(R.string.error_parser);
            //TODO
        }
    }*/


    @Override
    public void onSortByName() {
        L.t(getActivity(), "Sort name BOX OFFICE was clicked");

        mSorter.sortMovieByName(listMovies);
        adapterBoxOffice.notifyDataSetChanged();
    }

    @Override
    public void onSortByDate() {
        L.t(getActivity(), "Sort date BOX OFFICE was clicked");

        mSorter.sortMoviesByDate(listMovies);
        adapterBoxOffice.notifyDataSetChanged();
    }

    @Override
    public void onSortByRating() {
        L.t(getActivity(), "Sort rating BOX OFFICE was clicked");
        mSorter.sortMoviesByRating(listMovies);
        adapterBoxOffice.notifyDataSetChanged();
    }

    //En este metodo tenemos como parametros los datos que recibimos del AsyncTask
    //Este metodo es llamado 2 veces:
    // 1. Cuando cargamos la pantalla por primera vez y la BD esta vacia
    // 2. Cuando hacemos swipeToRefresh
    @Override
    public void onBoxOfficeMoviesLoaded(ArrayList<Movie> listMovies) {
        L.m("FragmentBoxOffice: onBoxOfficeMoviesLoaded Fragment");

        //Si entra aqui al hacer swipe to refresh entonces debemos apagar el refreshing
        if(mSwipeRefreshLayout.isRefreshing()){
            mSwipeRefreshLayout.setRefreshing(false);
        }

        adapterBoxOffice.setMovieList(listMovies);
    }

    @Override
    public void onRefresh() {
        L.t(getActivity(), "onRefresh");
        new TaskLoadMoviesBoxOffice(this).execute();
    }
}
